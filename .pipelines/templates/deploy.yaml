parameters:
- name: serviceConnectionName
  type: string
- name: environmentName
  type: string
- name: resourceGroupName
  type: string
- name: deploymentRegion
  type: string
  default: 'eastus'
- name: infraProvider
  type: string
  values:
    - bicep
    - tf
- name: stageDependencies
  type: object
  default: []
- name: createRbacAssignments
  type: boolean
  default: true
- name: tfStateStorageAccountName
  type: string
  default: ''
- name: tfStateStorageAccountResourceGroupName
  type: string
  default: ''

stages:
  - stage: Deploy_to_${{ parameters.environmentName }}
    displayName: Deploy to ${{ parameters.environmentName }}
    dependsOn: ${{ parameters.stageDependencies }}
    jobs:
    - deployment: ${{ parameters.environmentName }}_Deployment
      displayName: ${{ parameters.environmentName }} Deployment
      pool:
        vmImage: ubuntu-latest
      environment: ${{ parameters.environmentName }}
      variables:
        infraTemplate: $(Pipeline.Workspace)/infrastructure/main.${{ parameters.infraProvider }}
        ${{ if eq(parameters.infraProvider, 'bicep') }}:
          parameterFile: $(Pipeline.Workspace)/infrastructure/parameters/main.${{ parameters.environmentName }}.json
        ${{ if eq(parameters.infraProvider, 'tf') }}:
          parameterFile: $(Pipeline.Workspace)/infrastructure/parameters/main.${{ parameters.environmentName }}.tfvars
        lociAppPackage: $(Pipeline.Workspace)/logicapp/logicapp.zip
        setFunctionSecretScriptFile: $(Pipeline.Workspace)/scripts/set-function-key-secret.sh
        tfPlanLocation: $(Build.ArtifactStagingDirectory)/deployment.tfplan
        tfStorage: ${{ parameters.tfStateStorageAccountName }}
        tfRg: ${{ parameters.tfStateStorageAccountResourceGroupName }}
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: infrastructure
              displayName: Download infrastructure artifact
            
            - download: current
              artifact: scripts
              displayName: Download scripts artifact
            
            - download: current
              artifact: logicapp
              displayName: Download Logic App workflows artifact
            
            - task: AzureResourceManagerTemplateDeployment@3
              displayName: Deploy Bicep template to ${{ parameters.environmentName}}
              condition: eq('${{ parameters.infraProvider }}', 'bicep')
              inputs:
                deploymentMode: 'Incremental'
                deploymentScope: 'Resource Group'
                deploymentName: $(Build.BuildId)
                resourceGroupName: ${{ parameters.resourceGroupName }}
                location: ${{ parameters.deploymentRegion }}
                azureResourceManagerConnection: ${{ parameters.serviceConnectionName }}
                csmFile: ${{ variables.infraTemplate }}
                csmParametersFile: ${{ variables.parameterFile }}
                overrideParameters: '-buildId $(Build.BuildId)'

            - task: AzureCLI@2
              displayName: Configure Terraform azurerm backend
              condition: eq('${{ parameters.infraProvider }}', 'tf')
              inputs:
                azureSubscription: ${{ parameters.serviceConnectionName }}
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                workingDirectory: $(Pipeline.Workspace)/infrastructure/
                inlineScript: |
                  echo "Setting up Terraform backend storage account access..."
                  ARM_ACCESS_KEY=$(az storage account keys list --account-name $(tfStorage) --resource-group $(tfRg) --query "[0].value" -o tsv)
                  echo "##vso[task.setvariable variable=tfStorageKey;]$ARM_ACCESS_KEY"

            - task: Bash@3
              displayName: Build Terraform templates
              condition: eq('${{ parameters.infraProvider }}', 'tf')
              inputs:
                targetType: 'inline'
                script: |
                  echo "Initializing Terraform..."
                  terraform init

                  echo "Running terraform plan..."
                  echo "Param file: $(parameterFile)"
                  echo "Plan file: $(tfPlanLocation)"
                  terraform plan -var-file $(parameterFile) -out $(tfPlanLocation)
              env:
                ARM_ACCESS_KEY: $(tfStorageKey)
